// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.AspNetCore.SignalR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace DataAccessLayer.Repositories
{

    public partial class Sparepart
    {
        public short SparePartId { get; set; }

        public string PartName { get; set; }

        public int ValidityLength { get; set; }

        public short Quantity { get; set; }

        public virtual ICollection<Sparepartspurchaseorder> Sparepartspurchaseorders { get; set; } = new List<Sparepartspurchaseorder>();

        public virtual ICollection<Sparepartsreplacement> Sparepartsreplacements { get; set; } = new List<Sparepartsreplacement>();

        public virtual ICollection<Sparepartswithdrawapplication> Sparepartswithdrawapplications { get; set; } = new List<Sparepartswithdrawapplication>();
        public Sparepart() { }
    }
    public partial class Sparepart
    {
        private readonly appDBContext _appDBContext;
        
        public Sparepart(appDBContext appDBContext)
        {
            _appDBContext = appDBContext;
        }
        public async Task AddSparePart(Sparepart spare)
        {
            try
            {
                if (string.IsNullOrEmpty(spare.PartName) || spare.ValidityLength == 0 || spare.Quantity == 0)
                {
                    throw new InvalidOperationException("Part name, validity length, and quantity cannot be null or zero.");
                }

                var existingPart = await _appDBContext.Spareparts
                    .FirstOrDefaultAsync(x => x.PartName == spare.PartName);

                if (existingPart != null)
                {
                    Console.WriteLine("Spare part already exists. Skipping creation.");
                }

                _appDBContext.Spareparts.Add(spare);
                await _appDBContext.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                // You can log the exception or rethrow depending on your application's needs
                Console.WriteLine($"Error adding spare part: {ex.Message}");
                throw;
            }
        }

        public async Task UpdateSparePart(Sparepart spare)
        {
            var existingPart = await _appDBContext.Spareparts
                .FirstOrDefaultAsync(x => x.SparePartId == spare.SparePartId);

            if (existingPart == null)
                throw new Exception("Spare part not found.");

            if (await _appDBContext.Spareparts.AnyAsync(x => x.PartName == spare.PartName && x.SparePartId != spare.SparePartId))
                throw new Exception("Part name already exists.");

            existingPart.PartName = spare.PartName;
            existingPart.ValidityLength = spare.ValidityLength;
            existingPart.Quantity = spare.Quantity;

            await _appDBContext.SaveChangesAsync();
        }



        public async Task DeleteSparePart(int id)
        {
            var sparepart = await _appDBContext.Spareparts
                .FirstOrDefaultAsync(x => x.SparePartId == id);

            if (sparepart == null)
            {
                throw new Exception("Spare part not found.");
            }

            _appDBContext.Spareparts.Remove(sparepart);
            await _appDBContext.SaveChangesAsync();
        }


        public async Task<List<Sparepart>> GetAllSparePart()
        {
            return await _appDBContext.Spareparts.AsNoTracking().ToListAsync();
        }

        public async Task<Sparepart> GetSparePartByID(int id)
        {
            var part = await _appDBContext.Spareparts
                .AsNoTracking()
                .FirstOrDefaultAsync(sp => sp.SparePartId == id);

            if (part == null)
            {
                throw new Exception("Spare part not found.");
            }

            return part;
        }
        public async Task<Sparepart> GetSparePartByName(string name)
        {
            var part = await _appDBContext.Spareparts
                .AsNoTracking()
                .FirstOrDefaultAsync(sp => sp.PartName == name);

            if (part == null)
            {
                throw new Exception("Spare part not found.");
            }

            return part;
        }


        public async Task UpdateByNameSparePart(string PartName, Sparepart spare)
        {
            var existing = await _appDBContext.Spareparts
                .FirstOrDefaultAsync(k => k.PartName == PartName);

            if (existing == null)
            {
                throw new InvalidOperationException("Could not find a spare part with the given name.");
            }

            // Update the properties
            existing.Quantity = spare.Quantity;
            existing.ValidityLength = spare.ValidityLength;
            

            await _appDBContext.SaveChangesAsync();
        }
        public async Task<int> CountAllOrdersAsync()
        {
            return await _appDBContext.Consumableswithdrawapplications.CountAsync();
        }

    }

}