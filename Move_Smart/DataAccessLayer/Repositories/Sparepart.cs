// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace DataAccessLayer.Repositories
{ 

public partial class Sparepart
{
    public short SparePartId { get; set; }

    public string PartName { get; set; }

    public int ValidityLength { get; set; }

    public short Quantity { get; set; }

    public virtual ICollection<Sparepartspurchaseorder> Sparepartspurchaseorders { get; set; } = new List<Sparepartspurchaseorder>();

    public virtual ICollection<Sparepartsreplacement> Sparepartsreplacements { get; set; } = new List<Sparepartsreplacement>();

    public virtual ICollection<Sparepartswithdrawapplication> Sparepartswithdrawapplications { get; set; } = new List<Sparepartswithdrawapplication>();
        public Sparepart() { }
    }
    public partial class Sparepart
    {
        private readonly appDBContext _appDBContext;
        public Sparepart(appDBContext appDBContext)
        {
            _appDBContext = appDBContext;
        }
        public async Task AddSparePart(Sparepart spare)
        {
            var check = await _appDBContext.Spareparts.FirstOrDefaultAsync(x => x.PartName == spare.PartName);
            if (check != null)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            if (string.IsNullOrEmpty(spare.PartName) && spare.ValidityLength == 0 && spare.Quantity == 0)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            _appDBContext.Spareparts.Add(spare);
            await _appDBContext.SaveChangesAsync();
        }

        public async Task UpdateSparePart(Sparepart spare)
        {
            _appDBContext.Spareparts.Update(spare);
            await _appDBContext.SaveChangesAsync();
        }
        public async Task DeleteSparePart(string PartName)
        {
            var sparepart = await _appDBContext.Spareparts.AsNoTracking().FirstOrDefaultAsync(id => id.PartName == PartName);
            if (sparepart == null)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            _appDBContext.Spareparts.Remove(sparepart);
            await _appDBContext.SaveChangesAsync();
        }

        public async Task<List<Sparepart>> GetAllSparePart()
        {
            return await _appDBContext.Spareparts.AsNoTracking().ToListAsync();
        }

        public async Task<Sparepart> GetSparePartByName(string PartName)
        {
            return await _appDBContext.Spareparts.AsNoTracking().FirstAsync(id => PartName == id.PartName);
        }

        public async Task UpdateByNameSparePart(string PartName, Sparepart spare)
        {
            var existing = await _appDBContext.Spareparts.AsNoTracking().FirstAsync(k => k.PartName == PartName);
            if (existing == null)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            existing.Quantity = spare.Quantity;
            existing.ValidityLength = spare.ValidityLength;
            existing.PartName = spare.PartName;

            //_appDBContext.spareparts.Update(existing);
            await _appDBContext.SaveChangesAsync();

        }
    }

}