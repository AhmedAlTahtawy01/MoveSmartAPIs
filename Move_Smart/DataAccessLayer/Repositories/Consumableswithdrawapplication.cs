// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace DataAccessLayer.Repositories
{


    public partial class Consumableswithdrawapplication
    {
        public int WithdrawApplicationId { get; set; }

        public int ApplicationId { get; set; }

        public int ConsumableId { get; set; }

        public short VehicleId { get; set; }

        public ulong ApprovedByGeneralSupervisor { get; set; }

        public ulong ApprovedByGeneralManager { get; set; }

        public virtual Vehicleconsumable Consumable { get; set; }
    }
    class ConsumablesWithdrawApplicationRepo
    {

        private readonly appDBContext _appDBContext;
        public ConsumablesWithdrawApplicationRepo(appDBContext appDBContext)
        {
            _appDBContext = appDBContext;
        }
        public Task AddConsumablesWithdrawApplication(Consumableswithdrawapplication order)
        {
            throw new NotImplementedException();
        }

        public Task ApproveRequestAsync(int WithdrawApplicationID)
        {
            throw new NotImplementedException();
        }

        public Task CancelRequestAsync(int WithdrawApplicationID)
        {
            throw new NotImplementedException();
        }

        public Task CompleteRequestAsync(int WithdrawApplicationID, DateTime endDate)
        {
            throw new NotImplementedException();
        }

        public async Task DeleteConsumablesWithdrawApplication(int WithdrawApplicationID)
        {
            var application = await _appDBContext.Consumableswithdrawapplications.AsNoTracking().FirstOrDefaultAsync(id => id.WithdrawApplicationId == WithdrawApplicationID);
            if (application == null)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            _appDBContext.Consumableswithdrawapplications.Remove(application);
            await _appDBContext.SaveChangesAsync();
        }

        public async Task<List<Consumableswithdrawapplication>> GetAllConsumablesWithdrawApplication()
        {
            return await _appDBContext.Consumableswithdrawapplications.AsNoTracking().ToListAsync();
        }

        public async Task<Consumableswithdrawapplication> GetConsumablesWithdrawApplicationById(int WithdrawApplicationID)
        {
            return await _appDBContext.Consumableswithdrawapplications.AsNoTracking().FirstAsync(id => WithdrawApplicationID == id.WithdrawApplicationId);
        }

        public Task RejectRequestAsync(int WithdrawApplicationID)
        {
            throw new NotImplementedException();
        }

        public async Task UpdateConsumablesWithdrawApplication(Consumableswithdrawapplication order)
        {
            _appDBContext.Consumableswithdrawapplications.Update(order);
            await _appDBContext.SaveChangesAsync();
        }

    }
}