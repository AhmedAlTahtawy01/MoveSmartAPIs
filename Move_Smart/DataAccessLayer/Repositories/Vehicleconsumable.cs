// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace DataAccessLayer.Repositories
{


    public partial class Vehicleconsumable
    {
        public sbyte ConsumableId { get; set; }

        public string ConsumableName { get; set; }

        public int ValidityLength { get; set; }

        public short Quantity { get; set; }

        public virtual ICollection<Consumablespurchaseorder> Consumablespurchaseorders { get; set; } = new List<Consumablespurchaseorder>();

        public virtual ICollection<Consumablesreplacement> Consumablesreplacements { get; set; } = new List<Consumablesreplacement>();

        public virtual ICollection<Consumableswithdrawapplication> Consumableswithdrawapplications { get; set; } = new List<Consumableswithdrawapplication>();
        public Vehicleconsumable()
        {
            
        }
    }
    public partial class Vehicleconsumable
    {
        private readonly appDBContext _appDBContext;
        public Vehicleconsumable(appDBContext appDBContext)
        {
            _appDBContext = appDBContext;
        }
        public async Task AddVehicleConsumable(Vehicleconsumable consumables)
        {
            var check = await _appDBContext.Vehicleconsumables.FirstOrDefaultAsync(x => x.ConsumableName == consumables.ConsumableName);
            if (check != null)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            if (string.IsNullOrEmpty(consumables.ConsumableName) && consumables.ValidityLength == 0 && consumables.Quantity == 0)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            _appDBContext.Vehicleconsumables.Add(consumables);
            await _appDBContext.SaveChangesAsync();

        }

        public async Task DeleteVehicleConsumable(string ConsumableName)
        {
            var counsume = await _appDBContext.Vehicleconsumables.AsNoTracking().FirstOrDefaultAsync(st => st.ConsumableName == ConsumableName);
            if (counsume == null)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            _appDBContext.Vehicleconsumables.Remove(counsume);
            await _appDBContext.SaveChangesAsync();
        }

        public async Task<List<Vehicleconsumable>> GetAllVehicleConsumable()
        {
            return await _appDBContext.Vehicleconsumables.AsNoTracking().ToListAsync();
        }


        public async Task<Vehicleconsumable> GetVehicleConsumableByName(string ConsumableName)
        {
            return await _appDBContext.Vehicleconsumables.AsNoTracking().FirstAsync(id => ConsumableName == id.ConsumableName);
        }

        public async Task UpdateVehicleConsumable(Vehicleconsumable consumables)
        {
            _appDBContext.Vehicleconsumables.Update(consumables);
            await _appDBContext.SaveChangesAsync();
        }

    }

}