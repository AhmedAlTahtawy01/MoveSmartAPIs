// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Identity.Client;
using System;
using System.Collections.Generic;

namespace DataAccessLayer.Repositories
{


    public partial class Vehicleconsumable
    {
        public int ConsumableId { get; set; }
        public string ConsumableName { get; set; }
        public int ValidityLength { get; set; }
        public int Quantity { get; set; }
        public virtual ICollection<Consumablespurchaseorder> Consumablespurchaseorders { get; set; } = new List<Consumablespurchaseorder>();
        public virtual ICollection<Consumablesreplacement> Consumablesreplacements { get; set; } = new List<Consumablesreplacement>();
        public virtual ICollection<Consumableswithdrawapplication> Consumableswithdrawapplications { get; set; } = new List<Consumableswithdrawapplication>();
        public Vehicleconsumable()
        {

        }
    }
    public partial class Vehicleconsumable
    {
        private readonly appDBContext _appDBContext;
        public Vehicleconsumable(appDBContext appDBContext)
        {
            _appDBContext = appDBContext;
        }
        public async Task AddVehicleConsumable(Vehicleconsumable consumables)
        {
            if (consumables.ConsumableId != 0)
            {
                throw new Exception("Do not provide an ID when adding a new consumable.");
            }

            if (string.IsNullOrWhiteSpace(consumables.ConsumableName) ||
                consumables.ValidityLength == 0 ||
                consumables.Quantity == 0)
            {
                throw new Exception("Consumable name, validity length, and quantity cannot be null or zero.");
            }

            var check = await _appDBContext.Vehicleconsumables
                .FirstOrDefaultAsync(x => x.ConsumableId == consumables.ConsumableId);

            if (check != null)
            {
                throw new Exception("Consumable with the same name already exists.");
            }

            _appDBContext.Vehicleconsumables.Add(consumables);
            await _appDBContext.SaveChangesAsync();
        }

        public async Task DeleteVehicleConsumable(int id)
        {
            var counsume = await _appDBContext.Vehicleconsumables.AsNoTracking().FirstOrDefaultAsync(st => st.ConsumableId == id);
            if (counsume == null)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            _appDBContext.Vehicleconsumables.Remove(counsume);
            await _appDBContext.SaveChangesAsync();
        }

        public async Task<List<Vehicleconsumable>> GetAllVehicleConsumable()
        {
            return await _appDBContext.Vehicleconsumables.AsNoTracking().ToListAsync();
        }


        public async Task<Vehicleconsumable> GetVehicleConsumableByID(int id)
        {
            var consumable = await _appDBContext.Vehicleconsumables
                .AsNoTracking()
                .FirstOrDefaultAsync(x => x.ConsumableId == id);

            if (consumable == null)
            {
                throw new Exception("Vehicle consumable not found.");
            }

            return consumable;
        }
         public async Task<Vehicleconsumable> GetVehicleConsumableByName(string name )
        {
            var consumable = await _appDBContext.Vehicleconsumables
                .AsNoTracking()
                .FirstOrDefaultAsync(x => x.ConsumableName== name);

            if (consumable == null)
            {
                throw new Exception("Vehicle consumable not found.");
            }

            return consumable;
        }

        public async Task UpdateVehicleConsumable(Vehicleconsumable consumables)
        {
            if (consumables.ConsumableId == 0)
                throw new Exception("Consumable ID cannot be null or zero for update.");

            bool nameExists = await _appDBContext.Vehicleconsumables
                .AnyAsync(c => c.ConsumableName== consumables.ConsumableName&& c.ConsumableId != consumables.ConsumableId);

            if (nameExists)
                throw new Exception("A consumable with the same name already exists.");

            _appDBContext.Vehicleconsumables.Update(consumables);
            await _appDBContext.SaveChangesAsync();
        }

        public async Task<Vehicleconsumable> UpdateConsumableAsynchronously(string name , Vehicleconsumable consumable)
        {
            var VehicleConsumable = await _appDBContext.Vehicleconsumables.FirstOrDefaultAsync(v=>v.ConsumableName == name);
            if (VehicleConsumable== null)
            {
                throw new InvalidOperationException($"Unable to find {name}");
                
            }
            //nowww we want to update the proprities of the vehicle consumable here let's go
            VehicleConsumable.Quantity = consumable.Quantity;
            VehicleConsumable.ValidityLength = consumable.ValidityLength;
            //VehicleConsumable.ConsumableName = consumable.ConsumableName;
            // update it nowwww
            await _appDBContext.SaveChangesAsync();
            return VehicleConsumable;
        }
        public async Task<int> CountAllOrdersAsync()
        {
            return await _appDBContext.Vehicleconsumables.CountAsync();
        }

    }

}