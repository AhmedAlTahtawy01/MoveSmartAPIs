// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace DataAccessLayer.Repositories
{
    public partial class Sparepartspurchaseorder
    {

        public int OrderId { get; set; }

        public int ApplicationId { get; set; }

        public short RequiredItem { get; set; }

        public short RequiredQuantity { get; set; }

        public ulong ApprovedByGeneralSupervisor { get; set; }

        public ulong ApprovedByGeneralManager { get; set; }

        public virtual Sparepart RequiredItemNavigation { get; set; }
        public Sparepartspurchaseorder() { }

    }
    public partial class SparePartsPurchaseOrderRepo
    {
        private readonly appDBContext _appDbContext;

        public SparePartsPurchaseOrderRepo(appDBContext appDbContext)
        {
            _appDbContext = appDbContext;
        }
        public async Task AddSparePartsPurchaseOrder(Sparepartspurchaseorder order)
        {
            var check = await _appDbContext.Sparepartspurchaseorders.FirstOrDefaultAsync(x => x.OrderId == order.OrderId);
            if (check != null)
            {
                throw new InvalidOperationException(" Spare part is already exists!");
            }

            _appDbContext.Sparepartspurchaseorders.Add(order);
            await _appDbContext.SaveChangesAsync();
        }

        public async Task DeleteSparePartsPurchaseOrder(int WithdrawApplicationID)
        {
            var sparepart = await _appDbContext.Sparepartspurchaseorders.AsNoTracking().FirstOrDefaultAsync(id => id.OrderId == WithdrawApplicationID);
            if (sparepart == null)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            _appDbContext.Sparepartspurchaseorders.Remove(sparepart);
            await _appDbContext.SaveChangesAsync();
        }

        public async Task<List<Sparepartspurchaseorder>> GetAllSparePartsPurchaseOrder()
        {
            return await _appDbContext.Sparepartspurchaseorders.AsNoTracking().ToListAsync();
        }

        public async Task<Sparepartspurchaseorder> GetSparePartsPurchaseOrderByID(int ApplicationID)
        {
            return await _appDbContext.Sparepartspurchaseorders.Include(c => c.ApplicationId).AsNoTracking().FirstAsync(id => ApplicationID == id.ApplicationId);
        }
        public async Task UpdateSparePartsPurchaseOrder(Sparepartspurchaseorder order)
        {
            _appDbContext.Sparepartspurchaseorders.Update(order);
            await _appDbContext.SaveChangesAsync();
        }

    }

}
