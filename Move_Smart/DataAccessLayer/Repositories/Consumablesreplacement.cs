// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace DataAccessLayer.Repositories
{
    public partial class Consumablesreplacement
    {
        public int ReplacementId { get; set; }

        public int MaintenanceId { get; set; }

        public int ConsumableId { get; set; }

        public virtual Vehicleconsumable Consumable { get; set; }
    }
    class ConsumablesReplacementRepo
    {
        private readonly appDBContext _appDbContext;
        public ConsumablesReplacementRepo(appDBContext appDbContext)
        {
            _appDbContext = appDbContext;
        }
        public async Task AddConsumablesReplacement(Consumablesreplacement order)
        {
            var check = await _appDbContext.Consumablesreplacements.FirstOrDefaultAsync(x => x.MaintenanceId == order.MaintenanceId);

            if (check != null)
            {
                throw new InvalidOperationException(" Cannot be null");
            }

            _appDbContext.Consumablesreplacements.Add(order);
            await _appDbContext.SaveChangesAsync();
        }



        public async Task DeleteAddConsumablesReplacement(int WithdrawApplicationID)
        {
            var order = await _appDbContext.Consumablesreplacements.AsNoTracking().FirstOrDefaultAsync(id => id.MaintenanceId == WithdrawApplicationID);
            if (order == null)
            {
                throw new InvalidOperationException(" Cannot be null");
            }
            _appDbContext.Consumablesreplacements.Remove(order);
            await _appDbContext.SaveChangesAsync();

        }

        public async Task<List<Consumablesreplacement>> GetAllConsumablesReplacement()
        {
            return await _appDbContext.Consumablesreplacements.AsNoTracking().ToListAsync();
        }

        public async Task<Consumablesreplacement> GetConsumablesReplacementByID(int WithdrawApplicationID)
        {
            return await _appDbContext.Consumablesreplacements.AsNoTracking().FirstAsync(id => WithdrawApplicationID == id.MaintenanceId);
        }

        public async Task UpdateConsumablesReplacement(Consumablesreplacement order)
        {
            _appDbContext.Consumablesreplacements.Update(order);
            await _appDbContext.SaveChangesAsync();
        }
    }
}